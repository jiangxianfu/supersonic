[
  {
    "params": [],
    "name": "camera",
    "description": "Provides access to the device's default camera application."
  },
  {
    "params": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[options]",
        "description": "an options object (optional). The following properties are available: * `quality`: Quality of the saved image (Number), expressed as a range of 0-100, where 100 is typically full resolution with no loss from file compression. Defaults to 100.\n* `destinationType`: Choose the format of the return value (Number). Available formats:\n * \"dataURL\": Return image as base64-encoded string\n * \"fileURI\": Return image file URI (default)\n * \"nativeURI\": Return image native URI (e.g., assets-library:// on iOS or content:// on Android)\n* `allowEdit`:  Allow simple editing of image before selection (Boolean). Defaults to `false`. Note that Android ignores the `allowEdit parameter.\n* `encodingType`: Choose the returned image file's encoding. Available encoding types:\n * \"jpeg\": Return JPEG encoded image (default).\n * \"png\": Return PNG encoded image.\n* `targetWidth`: Target width in pixels to scale image. Must be used with `targetHeight`. Aspect ratio remains constant.\n* `targetHeight`: Target height in pixels to scale image. Must be used with `targetWidth`. Aspect ratio remains constant.\n* `correctOrientation`: Rotate the image to correct for the orientation of the device during capture (Boolean). Defaults to `true`.\n* `saveToPhotoAlbum`: Save the image to the photo album on the device after capture (Boolean). Defaults to `false`.\n* `cameraDirection`: Choose the camera to use (front- or back-facing). Note that any `cameraDirection` value results in a back-facing photo on Android. Available directions:\n * \"back\": Use the back-facing camera (default).\n * \"front\": Use the front-facing camera.",
        "optional": true
      }
    ],
    "name": "takePicture",
    "description": "Opens the device's default camera application that allows users to take pictures. Once the user takes the photo, the camera application closes and the application is restored.",
    "returns": {
      "type": "returns",
      "types": [
        "Promise"
      ],
      "description": "Promise that is resolved with the the image file URI (default) or Base64 encoding of the image data as an argument depending on the `destinationType` option."
    },
    "usage": "```coffeescript\n# Basic usage\nsupersonic.media.camera.takePicture(300, 300)\n\n# With options\nsupersonic.media.camera.takePicture(300, 300 {\n  quality: 50\n  allowEdit: true\n  encodingType: \"png\"\n  saveToPhotoAlbum: true\n})\n```"
  },
  {
    "params": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[options]",
        "description": "an options object (optional). The following properties are available: * `quality`: Quality of the saved image (Number), expressed as a range of 0-100, where 100 is typically full resolution with no loss from file compression. Defaults to 100.\n* `destinationType`: Choose the format of the return value. Available formats:\n * \"dataURL\": Return image as base64-encoded string\n * \"fileURI\": Return image file URI (default)\n * \"nativeURI\": Return image native URI (e.g., assets-library:// on iOS or content:// on Android)\n* `allowEdit`:  Allow simple editing of image before selection (Boolean). Defaults to `false`. Note that Android ignores the `allowEdit parameter.\n* `encodingType`: Choose the returned image file's encoding. Available encoding types:\n * \"jpeg\": Return JPEG encoded image (default).\n * \"png\": Return PNG encoded image.\n* `targetWidth`: Target width in pixels to scale image. Must be used with `targetHeight`. Aspect ratio remains constant.\n* `targetHeight`: Target height in pixels to scale image. Must be used with `targetWidth`. Aspect ratio remains constant.\n* `mediaType`: Set the type of media to select from. Available media types:\n * \"picture\": Allow selection of still pictures only (default).\n * \"video\": Allow selection of video only, will always return \"fileURI\".\n * \"allMedia\": Allow selection from all media types.\n* `correctOrientation`: Rotate the image to correct for the orientation of the device during capture (Boolean). Defaults to `true`.\n* `popoverOptions`: NOT SUPPORTED",
        "optional": true
      }
    ],
    "name": "getFromPhotoLibrary",
    "description": "Displays a dialog that allows users to select an existing image. Once the user selects the photo, the camera application closes and the application is restored.",
    "returns": {
      "type": "returns",
      "types": [
        "Promise"
      ],
      "description": "Promise that is resolved with the the image file URI (default) or Base64 encoding of the image data as an argument depending on the `destinationType` option."
    },
    "usage": "```coffeescript\n# Basic usage\nsupersonic.media.camera.getFromPhotoLibrary(300, 300)\n\n# With options\nsupersonic.media.camera.getFromPhotoLibrary(300, 300 {\n  quality: 50\n  allowEdit: true\n  encodingType: \"png\"\n})\n```"
  }
]